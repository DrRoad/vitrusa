mod <- lm(Value ~ Comp * Soil, data = data)
return(anova(mod))
}
#check that output is appropriate
#
fit_mod(surf.n$data[[1]])
# #
surf.n <- surf.n %>%
mutate(mod = purrr::map(data, fit_mod))
# #
#surf.n$mod[[1]]
# #
#   broom::glance(surf.n$mod[[1]])
#   broom::tidy(surf.n$mod[[1]])
surf.n <- surf.n %>%
dplyr::mutate(tidy = purrr::map(mod, broom::tidy),
n = purrr::map(data, nrow) %>% simplify())
surf.n
surf.m <- surf.n %>%
tidyr::unnest(tidy)
# dplyr::select(-(std.error:p.value)) %>%
# tidyr::spread(term, estimate)
#
surf.m
write_csv(surf.m, file.path(Rout,"Test.surface.csv"))
#remove soil with no comparison
#include depth as a factor
d.s <- Wd %>%
filter(Prop %in% Properties & Soil != "Feliciana")%>%
mutate(Depth = as.factor(hor_top))
ds.n <- d.s %>%
group_by(Prop)%>%
nest()
#function for glm model
fit_mod <- function(data){
mod <- lm(Value ~ Comp * Soil * Depth, data = data)
return(anova(mod))
}
#check that output is appropriate
#
fit_mod(ds.n$data[[1]])
# #
depth.soil.n <- ds.n %>%
mutate(mod = purrr::map(data, fit_mod))
# #
#surf.n$mod[[1]]
# #
#   broom::glance(surf.n$mod[[1]])
#   broom::tidy(surf.n$mod[[1]])
depth.soil <- depth.soil.n %>%
dplyr::mutate(tidy = purrr::map(mod, broom::tidy),
n = purrr::map(data, nrow) %>% simplify())
depth.soil.m <- depth.soil %>%
tidyr::unnest(tidy)
# dplyr::select(-(std.error:p.value)) %>%
# tidyr::spread(term, estimate)
write_csv(depth.soil.m, file.path(Rout,"Test.Depth_Soil.csv"))
###should really do this with mixed moedl
# A.M <- Wd %>%
#   filter(Prop %in% Properties) %>%
#   mutate(Comp = factor(Comp, levels = c('CT-C/S', 'RT-C/S', 'Grass'))) %>%
#   filter(Soil == "Leen" & comp %in% c("A Horizons", "B Horizons")) %>%
#   group_by(Comp, Comp, Prop, comp) %>%
#   summarise(Value = mean(Value, na.rm=TRUE))
#
#
# A.lm.mc <- A.M %>%  filter(comp %in% c("A Horizons"))%>%
#    group_by(Prop)%>%
#   nest()
#
# #function for glm model
# fit_mod <- function(data){
#     mod <- lm(Value ~ Comp, random=~1|Comp, data = data)
#     return(anova(mod))
# }
#
#
# #check that output is appropriate
#
# fit_mod(A.lm.mc$data[[1]])
#
# A.lm.mc <- A.lm.mc %>%
#    mutate(mod = purrr::map(data, fit_mod))
#
# A.lm.mc$mod[[1]]
#
#    # broom::glance(surf.n$mod[[1]])
#    # broom::tidy(surf.n$mod[[1]])
#
#
# comp.A <- A.lm.mc %>%
#                  dplyr::mutate(tidy = purrr::map(mod, broom::tidy),
#                                n = purrr::map(data, nrow) %>% simplify())
#
# comp.A
#
# comp.A <- comp.A %>%
#                    tidyr::unnest(tidy)
#                   # dplyr::select(-(std.error:p.value)) %>%
#                   # tidyr::spread(term, estimate)
#                   #
# comp.A
#
# PropertiesB <- c('WaterSol_P', 'Mehlich3_P', 'Tot_P', 'NewZ_P', 'Pom_C', 'CALC_SOC', 'Tot_N', 'Pom_N','BulkDensity', 'pH_H20', 'CEC_ph7')
#
# B.M <- Wd %>%
#   filter(Prop %in% PropertiesB) %>%
#   mutate(Comp = factor(Comp, levels = c('CT-C/S', 'RT-C/S', 'Grass'))) %>%
#   filter(Soil == "Leen" & comp %in% c("A Horizons", "B Horizons")) %>%
#   group_by(Comp, Comp, Prop, comp) %>%
#   summarise(Value = mean(Value, na.rm=TRUE))
#
#
# B.lm.mc <- B.M %>%  filter(comp %in% c("B Horizons"))%>%
#    group_by(Prop)%>%
#   nest()
#
# #function for glm model
# fit_mod <- function(data){
#     mod <- lm(Value ~ Comp, random=~1|Comp, data = data)
#     return(anova(mod))
# }
#
#
# #check that output is appropriate
#
# fit_mod(B.lm.mc$data[[1]])
#
# B.lm.mc <- B.lm.mc %>%
#    mutate(mod = purrr::map(data, fit_mod))
#
# B.lm.mc$mod[[1]]
#
#    # broom::glance(surf.n$mod[[1]])
#    # broom::tidy(surf.n$mod[[1]])
#
#
# comp.B <- B.lm.mc %>%
#                  dplyr::mutate(tidy = purrr::map(mod, broom::tidy),
#                                n = purrr::map(data, nrow) %>% simplify())
#
# comp.B
#
# comp.B <- comp.B %>%
#                    tidyr::unnest(tidy)
#                   # dplyr::select(-(std.error:p.value)) %>%
#                   # tidyr::spread(term, estimate)
#                   #
# comp.B
ggplot(bd2, aes(y = BulkDensity, x= Tot_C))+ geom_point(aes(color = Clay, shape = hor_top ), size = 8) +    theme(axis.text.x=element_text(angle=-45, hjust = .1)) + scale_colour_gradient2(low = "red", mid = "grey", high = "green", midpoint = 22)
ggplot(bd2 %>% mutate(Top = as.factor(hor_top)), aes(y = BulkDensity, x= Tot_C))+ geom_point(aes(color = Clay, shape = Top), size = 8) +    theme(axis.text.x=element_text(angle=-45, hjust = .1)) + scale_colour_gradient2(low = "red", mid = "grey", high = "green", midpoint = 22)
names(tnsh)
tn %>%
select(hor_desg, hor_top, hor_bot, Field, Comp, Prop, Value) %>%
filter(str_detect(Prop, "BD")) %>%
ggplot(aes(Soil, Value)) + geom_point(aes(color = Prop)) + geom_point(aes(Field, Value))+ facet_grid(Comp~.) +
ylab("Bulk Density g/cm3") + xlab("Horizon Top (cm)")
names(tn)
names(tnsh)[1:12]
tn <- tnsh %>%
select(-(matches("X"))) %>%
gather(Prop, Value, -c(KSSL.Project.lab, KSSL.Project.name, UserPedonID, labsampno, layerID, Comp, Cover_kind, Field, Crop,  Mgmt, Soil, hor_desg, hor_top, hor_bot)) %>%
mutate(Value = as.numeric(Value), hor_top = as.numeric(hor_top), hor_bot = as.numeric(hor_bot))
tn %>%
select(hor_desg, hor_top, hor_bot, Field, Comp, Prop, Value) %>%
filter(str_detect(Prop, "BD")) %>%
ggplot(aes(Soil, Value)) + geom_point(aes(color = Prop)) + geom_point(aes(Field, Value))+ facet_grid(Comp~.) +
ylab("Bulk Density g/cm3") + xlab("Horizon Top (cm)")
tn %>%
select(hor_desg, hor_top, hor_bot, Soil,  Field, Comp, Prop, Value) %>%
filter(str_detect(Prop, "BD")) %>%
ggplot(aes(Soil, Value)) + geom_point(aes(color = Prop)) + geom_point(aes(Field, Value))+ facet_grid(Comp~.) +
ylab("Bulk Density g/cm3") + xlab("Horizon Top (cm)")
tn %>%
select(hor_desg, hor_top, hor_bot, Soil,  Field, Comp, Prop, Value) %>%
filter(str_detect(Prop, "BD")) %>%
ggplot(aes(Soil, Value)) + geom_point(aes(color = Prop)) + geom_point(aes(Field, Value))+ facet_grid(Comp~.) +
ylab("Bulk Density g/cm3") + xlab("Horizon Top (cm)")
tn %>%
select(hor_desg, hor_top, hor_bot, Soil,  Field, Comp, Prop, Value) %>%
filter(str_detect(Prop, "BD")) %>%
ggplot(aes(Soil, Value)) + geom_point(aes(color = Prop)) + geom_point(aes(Field, Value, color=Prop))+ facet_grid(Comp~.) +
ylab("Bulk Density g/cm3") + xlab("Horizon Top (cm)")
tn %>%
select(hor_desg, hor_top, hor_bot, Soil,  Field, Comp, Prop, Value) %>%
filter(str_detect(Prop, "BD")) %>%
ggplot(aes(Soil, Value)) + geom_point(aes(color = Prop, shape = Field)) +
facet_grid(Comp~.) +
ylab("Bulk Density g/cm3") + xlab("Horizon Top (cm)")
ylab("Bulk Density g/cm3") + xlab("Horizon Top (cm)")
tn %>%
select(hor_desg, hor_top, hor_bot, Soil,  Field, Comp, Prop, Value) %>%
filter(str_detect(Prop, "BD")) %>%
ggplot(aes(Soil, Value)) + geom_point(aes(color = Prop, shape = Field)) +
facet_grid(Comp~.) + ylab("Bulk Density g/cm3") + xlab("Horizon Top (cm)")
wd <- tn %>%
mutate_if(is.factor, as.character) %>%
mutate_if(is.integer, as.numeric) %>%
bind_rows(bd2 %>%
select(KSSL.Project.lab, KSSL.Project.name, UserPedonID, labsampno, layerID, Field, Comp, Cover_kind, Crop,  Mgmt, Soil, hor_desg, hor_top, hor_bot, BulkDensity, CALC_SOC) %>%
mutate_if(is.factor, as.character) %>%
mutate_if(is.integer, as.numeric) %>%
gather(Prop, Value, -c(KSSL.Project.lab, KSSL.Project.name, UserPedonID, labsampno, layerID, Field, Comp, Cover_kind, Crop,  Mgmt, Soil, hor_desg, hor_top, hor_bot))
)
names(tn)
wd <- tn %>%
mutate_if(is.factor, as.character) %>%
mutate_if(is.integer, as.numeric) %>%
bind_rows(bd2 %>%
select(KSSL.Project.lab, KSSL.Project.name, UserPedonID, labsampno, layerID, Comp, Cover_kind, Crop,  Mgmt, Soil, hor_desg, hor_top, hor_bot, BulkDensity, CALC_SOC) %>%
mutate_if(is.factor, as.character) %>%
mutate_if(is.integer, as.numeric) %>%
gather(Prop, Value, -c(KSSL.Project.lab, KSSL.Project.name, UserPedonID, labsampno, layerID, Comp, Cover_kind, Crop,  Mgmt, Soil, hor_desg, hor_top, hor_bot))
)
names(wd)
Wd <-wd #recreate skipped steps
Properties <- c('WaterSol_P', 'Mehlich3_P', 'Tot_P', 'NewZ_P', 'AggStab', 'Bgluc',  'Pom_C', 'CALC_SOC', 'Tot_N', 'Pom_N','BulkDensity', 'pH_H20', 'CEC_ph7')
Msurf <- Wd %>%
filter(Prop %in% Properties & hor_top == 0)
surf.n <- Msurf %>%
group_by(Prop)%>%
nest()
#function for glm model
fit_mod <- function(data){
mod <- lm(Value ~ Comp * Field|Soil, data = data)
return(anova(mod))
}
fit_mod(surf.n$data[[1]])
mod <- lm(Value ~ Comp * Field(Soil), data = data)
fit_mod <- function(data){
mod <- lm(Value ~ Comp * Soil/Field, data = data)
return(anova(mod))
}
fit_mod(surf.n$data[[1]])
d.s <- Wd %>%
filter(Prop %in% Properties & Soil != "Feliciana")%>%
mutate(Depth = as.factor(hor_top))
ds.n <- d.s %>%
group_by(Prop)%>%
nest()
#function for glm model
fit_mod <- function(data){
mod <- lm(Value ~ Comp * Soil/Field * Depth, data = data)
return(anova(mod))
}
#check that output is appropriate
#
fit_mod(ds.n$data[[1]])
#function for glm model
fit_mod <- function(data){
mod <- lm(Value ~ Comp * Depth + Soil/Field, data = data)
return(anova(mod))
}
#check that output is appropriate
#
fit_mod(ds.n$data[[1]])
#function for glm model
fit_mod <- function(data){
mod <- lm(Value ~ Comp * Depth + Soil*Depth + Soil/Field, data = data)
return(anova(mod))
}
#check that output is appropriate
#
fit_mod(ds.n$data[[1]])
#function for glm model
#this one tells it to evaluate Comp, Depth and Soil - but that fields are
fit_mod <- function(data){
mod <- lm(Value ~ Comp * Depth + Soil*Depth + Error(Field), data = data)
return(anova(mod))
}
fit_mod(ds.n$data[[1]])
fit_mod <- function(data){
mod <- lm(Value ~ Comp * Depth + Soil*Depth + Field/UserPedonID, data = data)
return(anova(mod))
}
fit_mod(ds.n$data[[1]])
fit_mod <- function(data){
mod <- lm(Value ~ Comp * Depth + Soil*Depth + Soil/Field/UserPedonID, data = data)
return(anova(mod))
}
fit_mod(ds.n$data[[1]])
fit_mod <- function(data){
mod <- lm(Value ~ Comp * + Soil + Soil/Field/UserPedonID, data = data)
return(anova(mod))
}
#check that output is appropriate
#
fit_mod(ds.n$data[[1]])
#function for glm model
#this one tells it to evaluate Comp, Depth and Soil - but that fields are
fit_mod <- function(data){
mod <- lm(Value ~ Comp * Depth + Soil*Depth + Soil/Field/UserPedonID, data = data)
return(anova(mod))
}
#check that output is appropriate
#
fit_mod(ds.n$data[[1]])
fit_mod <- function(data){
mod <- lm(Value ~ Comp * Depth + Soil+Depth + Soil/Field/UserPedonID, data = data)
return(anova(mod))
}
#check that output is appropriate
#
fit_mod(ds.n$data[[1]])
depth.soil.n <- ds.n %>%
mutate(mod = purrr::map(data, fit_mod))
str(ds.n)
str(ds.n)[[1]]
fit_mod <- function(data){
mod <- lm(Value ~ Comp * Soil+ Soil/Field/Depth/UserPedonID, data = data)
return(anova(mod))
}
fit_mod(ds.n$data[[1]])
fit_mod <- function(data){
mod <- lm(Value ~ Soil/Field/Comp/UserPedonID/Depth, data = data)
return(anova(mod))
}
#check that output is appropriate
#
fit_mod(ds.n$data[[1]])
fit_mod <- function(data){
mod <- lm(Value ~ Comp +Soil/Field/Comp/UserPedonID/Depth, data = data)
return(anova(mod))
}
#check that output is appropriate
#
fit_mod(ds.n$data[[1]])
fit_mod <- function(data){
mod <- lm(Value ~ Comp + Soil + Depth + Soil/Field, data = data)
return(anova(mod))
}
#check that output is appropriate
#
fit_m
fit_mod(ds.n$data[[1]])
fit_mod <- function(data){
mod <- lm(Value ~ Comp * Depth + siol*Depth + Soil/Field, data = data)
return(anova(mod))
}
#check that output is appropriate
#
fit_mod(ds.n$data[[1]])
fit_mod <- function(data){
mod <- lm(Value ~ Comp * Depth + Soil*Depth + Soil/Field, data = data)
return(anova(mod))
}
#check that output is appropriate
#
fit_mod(ds.n$data[[1]])
depth.soil.n <- ds.n %>%
mutate(mod = purrr::map(data, fit_mod))
Msurf <- Wd %>%
filter(Prop %in% Properties & hor_top == 0)
surf.n <- Msurf %>%
group_by(Prop)%>%
nest()
#function for glm model
fit_mod <- function(data){
mod <- lm(Value ~ Comp * Soil/Field, data = data)
return(anova(mod))
}
#check that output is appropriate
#
fit_mod(surf.n$data[[1]])
# #
surf.n <- surf.n %>%
mutate(mod = purrr::map(data, fit_mod))
fit_mod <- function(data){
mod <- lm(Value ~ Comp * Soil, data = data)
return(anova(mod))
}
#check that output is appropriate
#
fit_mod(surf.n$data[[1]])
# #
surf.n <- surf.n %>%
mutate(mod = purrr::map(data, fit_mod))
?lm
fit <- lmer(Value ~ Comp + 1|Soil/Field/Depth, data = data)
fit <- lmer(Value ~ Comp + 1|Soil/Field/Depth, data = Wd)
fit <- lmer(Value ~ Comp + 1|Soil/Field/Depth, data = surf.n$data[[1]])
fit <- lmer(Value ~ Comp + 1|Soil/Field/UserpPedonID, data = surf.n$data[[1]])
str(surf.n)
surf.n <- Msurf %>%
group_by(Prop)%>%
nest()
str(surf.n)
summary(tn$Field)
Msurf <- Wd %>%
filter(Prop %in% Properties & hor_top == 0)
surf.n <- Msurf %>%
group_by(Prop)%>%
nest()
str(surf.n)[[1]]
table(Wd$Field)
table(Msurf$Field)
surf.n <- Msurf %>%
group_by(Prop)%>%
nest()
str(surf.n, 1)
str(surf.n)[1]
str(surf.n, 1)
str(surf.n$AggStab)
str(surf.n["AggStab"])
str(surf.n, 1)
str(surf.n, 2)
str(surf.n, 3)
str(surf.n$Field)
str(surf.n$Feild)
Comp.SOIL <- as.data.frame(Wd %>%
filter(Prop %in% Properties) %>%
select(Comp, Field, Soil, Prop, Value, hor_top, hor_bot) %>%
mutate(thick = hor_bot - hor_top) %>%
group_by(Comp, Soil, Prop)%>%
summarise(N= sum(!is.na(Value)),
wt.mean = weighted.mean(x= Value, w = thick, na.rm=TRUE),
min = min(Value, na.rm=T),
max = max(Value, na.rm=T)))
Comp.SOIL <- as.data.frame(Wd %>%
filter(Prop %in% Properties) %>%
select(Comp, Field, Soil, Prop, Value, hor_top, hor_bot) %>%
mutate(thick = hor_bot - hor_top) %>%
group_by(Comp, Soil, Field, Prop)%>%
summarise(N= sum(!is.na(Value)),
wt.mean = weighted.mean(x= Value, w = thick, na.rm=TRUE),
min = min(Value, na.rm=T),
max = max(Value, na.rm=T)))
Field.surf <- as.data.frame(Wd %>%
filter(Prop %in% Properties & hor_top ==0) %>%
select(Comp, Soil, Prop, Value, hor_top, hor_bot) %>%
mutate(thick = hor_bot - hor_top) %>%
group_by(Comp, Soil, Prop)%>%
summarise(N= sum(!is.na(Value)),
wt.mean = weighted.mean(x= Value, w = thick, na.rm=TRUE),
min = min(Value, na.rm=T),
max = max(Value, na.rm=T)))
Field.avg <- as.data.frame(Wd %>%
filter(Prop %in% Properties) %>%
select(Comp, Field, Soil, Prop, Value, hor_top, hor_bot) %>%
mutate(thick = hor_bot - hor_top) %>%
group_by(Comp, Soil, Field, Prop)%>%
summarise(N= sum(!is.na(Value)),
wt.mean = weighted.mean(x= Value, w = thick, na.rm=TRUE),
min = min(Value, na.rm=T),
max = max(Value, na.rm=T)))
write_csv(Field.surf, file.path(Rout, "Field_surf.csv"))
write_csv(Field.avg, file.path(Rout, "Field_avg.csv"))
Msurf <- Field.surf %>%
filter(Prop %in% Properties)
surf.n <- Msurf %>%
group_by(Prop)%>%
nest()
#function for glm model 665061
fit_mod <- function(data){
mod <- lm(Value ~ Comp * Soil, data = data)
return(anova(mod))
}
#check that output is appropriate
#
fit_mod(surf.n$data[[1]])
Msurf <- Field.surf %>%
mutate(Value = wt.mean)%>%
filter(Prop %in% Properties)
surf.n <- Msurf %>%
group_by(Prop)%>%
nest()
#function for glm model 665061
fit_mod <- function(data){
mod <- lm(Value ~ Comp * Soil, data = data)
return(anova(mod))
}
#check that output is appropriate
#
fit_mod(surf.n$data[[1]])
#function for glm model 665061
fit_mod <- function(data){
mod <- lm(Value ~ Comp +Soil, data = data)
return(anova(mod))
}
#check that output is appropriate
#
fit_mod(surf.n$data[[1]])
fit <- lmer(Value ~ Comp + 1|Soil, data = data)
library(lme4)
fit <- lmer(Value ~ Comp + 1|Soil, data = data)
data = surf.n
fit <- lmer(Value ~ Comp + 1|Soil, data = data)
names(data)
Msurf <- Field.surf %>%
mutate(Value = wt.mean)%>%
filter(Prop %in% Properties)
surf.n <- Msurf %>%
group_by(Prop)%>%
nest()
#function for glm model 665061
fit_mod <- function(data){
mod <- lm(Value ~ Comp +Soil, data = data)
return(anova(mod))
}
#check that output is appropriate
#
fit_mod(surf.n$data[[1]])
# #
fit <- lmer(Value ~ Comp, data = data)
data <- surf.n
data <- surf.n[[1]]
surf.n <- surf.n %>%
mutate(mod = purrr::map(data, fit_mod))
data <- surf.n$data[[1]]
fit <- lmer(Value ~ Comp, data = data)
fit <- lmer(Value ~ Comp + 1|Field, data = data)
fit <- lmer(Value ~ Comp + 1, data = data)
