names(f)
names(h)
names(h)$stones
names(h)[15] <- "fragvoltot"
names(h)
names(f@horizons)[15] <- "fragvoltot"
names(f)
names(f@horizons)[15] <- "fragvoltot"
h$gravel <- h$gravel-h$fine_gravel
hp.m <- melt(h, id.vars="genhz", measure.vars=c('clay', 'sand', 'fine_gravel', 'gravel', 'cobbles', 'stones', 'fragvoltot'))
hp.cs <- ddply(h.m, .(variable,genhz), .fun=conditional.l.rv.h.summary)
hc.m <- melt(h, id.vars="genhz", measure.vars=c('phfield', 'd_value', 'd_chroma', 'm_value', 'm_chroma'))
hc.cs <- ddply(h.m, .(variable,genhz), .fun=conditional.l.rv.h.summary)
thk <- ddply(h, .(peiid, hzname), summarize, thickness=sum(hzdepb-hzdept))
thk.m <- melt(thk, id.vars="hzname", measure.vars="thickness")
thk.cs <- ddply(thk.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
data.n <- ddply(h, .(hzname), .drop=T, summarize, n=length(hzname))
head(h)
h$gravel <- h$gravel-h$fine_gravel
hp.m <- melt(h, id.vars="genhz", measure.vars=c('clay', 'sand', 'fine_gravel', 'gravel', 'cobbles', 'stones', 'fragvoltot'))
hp.cs <- ddply(hp.m, .(variable,genhz), .fun=conditional.l.rv.h.summary)
hc.m <- melt(h, id.vars="genhz", measure.vars=c('phfield', 'd_value', 'd_chroma', 'm_value', 'm_chroma'))
hc.cs <- ddply(hc.m, .(variable,genhz), .fun=conditional.l.rv.h.summary)
thk <- ddply(h, .(peiid, hzname), summarize, thickness=sum(hzdepb-hzdept))
thk.m <- melt(thk, id.vars="hzname", measure.vars="thickness")
thk.cs <- ddply(thk.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
conditional.l.rv.h.summary <- function(x) {
variable <- unique(x$variable)
v <- na.omit(x$value) # extract column, from long-formatted input data
precision <- if(variable == 'phfield') 1 else 0
ci <- quantile(v, na.rm=TRUE, probs=p)
d <- data.frame(min=ci[1], low=ci[2], rv=ci[3], high=ci[4], max=ci[5], stringsAsFactors=FALSE) # combine into DF
d$range <- with(d, paste("(", paste(round(c(min, low, rv, high, max), precision), collapse=', '), ")", sep="")) # add 'range' column for pretty-printing
return(d[6])
}
h$gravel <- h$gravel-h$fine_gravel
hp.m <- melt(h, id.vars="genhz", measure.vars=c('clay', 'sand', 'fine_gravel', 'gravel', 'cobbles', 'stones', 'fragvoltot'))
hp.cs <- ddply(hp.m, .(variable,genhz), .fun=conditional.l.rv.h.summary)
hc.m <- melt(h, id.vars="genhz", measure.vars=c('phfield', 'd_value', 'd_chroma', 'm_value', 'm_chroma'))
hc.cs <- ddply(hc.m, .(variable,genhz), .fun=conditional.l.rv.h.summary)
thk <- ddply(h, .(peiid, hzname), summarize, thickness=sum(hzdepb-hzdept))
thk.m <- melt(thk, id.vars="hzname", measure.vars="thickness")
thk.cs <- ddply(thk.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
data.n <- ddply(h, .(hzname), .drop=T, summarize, n=length(hzname))
p <- c(0, 0.10, 0.5, 0.90, 1)
h$gravel <- h$gravel-h$fine_gravel
hp.m <- melt(h, id.vars="genhz", measure.vars=c('clay', 'sand', 'fine_gravel', 'gravel', 'cobbles', 'stones', 'fragvoltot'))
hp.cs <- ddply(hp.m, .(variable,genhz), .fun=conditional.l.rv.h.summary)
hc.m <- melt(h, id.vars="genhz", measure.vars=c('phfield', 'd_value', 'd_chroma', 'm_value', 'm_chroma'))
hc.cs <- ddply(hc.m, .(variable,genhz), .fun=conditional.l.rv.h.summary)
thk <- ddply(h, .(peiid, hzname), summarize, thickness=sum(hzdepb-hzdept))
thk.m <- melt(thk, id.vars="hzname", measure.vars="thickness")
thk.cs <- ddply(thk.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
data.n <- ddply(h, .(hzname), .drop=T, summarize, n=length(hzname))
hc.cs
h <- horizons(f)
h$d_chroma <- h$d_chroma
h$m_chroma <- h$m_chroma
# Horizon designations by generic horizon
if(length(na.exclude(f@horizons$genhz))>0){
addmargins(table(f@horizons$genhz, f@horizons$hzname, exclude=NULL))
}
# Summarize numeric variables by generic horizon
h$gravel <- h$gravel-h$fine_gravel
hp.m <- melt(h, id.vars="genhz", measure.vars=c('clay', 'sand', 'fine_gravel', 'gravel', 'cobbles', 'stones', 'fragvoltot'))
hp.cs <- ddply(hp.m, .(variable,genhz), .fun=conditional.l.rv.h.summary)
hc.m <- melt(h, id.vars="genhz", measure.vars=c('phfield', 'd_value', 'd_chroma', 'm_value', 'm_chroma'))
hc.cs <- ddply(hc.m, .(variable,genhz), .fun=conditional.l.rv.h.summary)
thk <- ddply(h, .(peiid, hzname), summarize, thickness=sum(hzdepb-hzdept))
thk.m <- melt(thk, id.vars="hzname", measure.vars="thickness")
thk.cs <- ddply(thk.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
data.n <- ddply(h, .(hzname), .drop=T, summarize, n=length(hzname))
# Range in characteristics for generic horizons (min, 10th, median, 90th, max)
str(h)
names(h)
h$dchroma <- "NA"
h <- horizons(f)
h$d_chroma <- "NA"
h$m_chroma <- "NA"
# Horizon designations by generic horizon
if(length(na.exclude(f@horizons$genhz))>0){
addmargins(table(f@horizons$genhz, f@horizons$hzname, exclude=NULL))
}
# Summarize numeric variables by generic horizon
h$gravel <- h$gravel-h$fine_gravel
hp.m <- melt(h, id.vars="genhz", measure.vars=c('clay', 'sand', 'fine_gravel', 'gravel', 'cobbles', 'stones', 'fragvoltot'))
hp.cs <- ddply(hp.m, .(variable,genhz), .fun=conditional.l.rv.h.summary)
hc.m <- melt(h, id.vars="genhz", measure.vars=c('phfield', 'd_value', 'd_chroma', 'm_value', 'm_chroma'))
hc.cs <- ddply(hc.m, .(variable,genhz), .fun=conditional.l.rv.h.summary)
thk <- ddply(h, .(peiid, hzname), summarize, thickness=sum(hzdepb-hzdept))
thk.m <- melt(thk, id.vars="hzname", measure.vars="thickness")
thk.cs <- ddply(thk.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
data.n <- ddply(h, .(hzname), .drop=T, summarize, n=length(hzname))
hc.cs
hc.m
# Summarize numeric variables by generic horizon
h$gravel <- h$gravel-h$fine_gravel
hp.m <- melt(h, id.vars="hzname", measure.vars=c('clay', 'sand', 'fine_gravel', 'gravel', 'cobbles', 'stones', 'fragvoltot'))
hp.cs <- ddply(hp.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
hc.m <- melt(h, id.vars="hzname", measure.vars=c('phfield', 'd_value', 'd_chroma', 'm_value', 'm_chroma'))
hc.cs <- ddply(hc.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
thk <- ddply(h, .(peiid, hzname), summarize, thickness=sum(hzdepb-hzdept))
thk.m <- melt(thk, id.vars="hzname", measure.vars="thickness")
thk.cs <- ddply(thk.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
data.n <- ddply(h, .(hzname), .drop=T, summarize, n=length(hzname))
hc.cs
hc.m
series
f <- fetchNASIS()
f <- subsetProfiles(f, s="taxonname == series")
slot(f, "horizons")$hzname <- "NA"
names(f@horizons)[15] <- "fragvoltot"
h <- horizons(f)
h$d_chroma <- "NA"
h$m_chroma <- "NA"
# Horizon designations by generic horizon
if(length(na.exclude(f@horizons$genhz))>0){
addmargins(table(f@horizons$genhz, f@horizons$hzname, exclude=NULL))
}
# Summarize numeric variables by generic horizon
h$gravel <- h$gravel-h$fine_gravel
hp.m <- melt(h, id.vars="hzname", measure.vars=c('clay', 'sand', 'fine_gravel', 'gravel', 'cobbles', 'stones', 'fragvoltot'))
hp.cs <- ddply(hp.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
hc.m <- melt(h, id.vars="hzname", measure.vars=c('phfield', 'd_value', 'd_chroma', 'm_value', 'm_chroma'))
hc.cs <- ddply(hc.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
thk <- ddply(h, .(peiid, hzname), summarize, thickness=sum(hzdepb-hzdept))
thk.m <- melt(thk, id.vars="hzname", measure.vars="thickness")
thk.cs <- ddply(thk.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
data.n <- ddply(h, .(hzname), .drop=T, summarize, n=length(hzname))
# Range in characteristics for generic horizons (min, 10th, median,
hc.cs
hc.m
str(h)
f <- fetchNASIS()
f <- subsetProfiles(f, s="taxonname == series")
f <- fetchNASIS()
f <- subsetProfiles(f, s="taxonname == series")
slot(f, "horizons")$hzname[is.na(slot(f, "horizons")$hzname)] <- "NA"
f@horizons$hzname
f <- fetchNASIS()
f <- subsetProfiles(f, s="taxonname == series")
f@horizons$hzname[is.na(f@horizons$hzname)] <- "NA"
f@horizons$hzname
print.xtable(rbind(hp.cs, data.n), hzname ~ variable, value='range')
# Summarize numeric variables by generic horizon
h$gravel <- h$gravel-h$fine_gravel
hp.m <- melt(h, id.vars="hzname", measure.vars=c('clay', 'sand', 'fine_gravel', 'gravel', 'cobbles', 'stones', 'fragvoltot'))
hp.cs <- ddply(hp.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
hc.m <- melt(h, id.vars="hzname", measure.vars=c('phfield', 'd_value', 'd_chroma', 'm_value', 'm_chroma'))
hc.cs <- ddply(hc.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
thk <- ddply(h, .(peiid, hzname), summarize, thickness=sum(hzdepb-hzdept))
thk.m <- melt(thk, id.vars="hzname", measure.vars="thickness")
thk.cs <- ddply(thk.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
data.n <- ddply(h, .(hzname), .drop=T, summarize, n=length(hzname))
# Range in characteristics for generic horizons (min, 10th, median, 90th, max)
print.xtable(rbind(hp.cs, data.n), hzname ~ variable, value='range')
print.xtable(caste(rbind(hp.cs, data.n), hzname ~ variable, value='range'))
print.xtable(cast(rbind(hp.cs, data.n), hzname ~ variable, value='range'))
print.xtable(rbind(cast(hp.cs, data.n), hzname ~ variable, value='range'))
print.xtable(cast(rbind(hp.cs, data.n), hzname ~ variable, value='range'))
cast(rbind(hp.cs, data.n)
)
data.n
data.n <- ddply(h, .(hzname), .drop=T, summarize, n=length(hzname))
data.n
h
h$hzname
f@horizons$hzname[is.na(f@horizons$hzname)] <- "NA"
f <- fetchNASIS()
f <- subsetProfiles(f, s="taxonname == series")
f@horizons$hzname[is.na(f@horizons$hzname)] <- "NA"
names(f@horizons)[15] <- "fragvoltot"
f@horizons$hzname
h <- horizons(f)
h$d_chroma <- "NA"
h$m_chroma <- "NA"
# Horizon designations by generic horizon
if(length(na.exclude(f@horizons$genhz))>0){
addmargins(table(f@horizons$genhz, f@horizons$hzname, exclude=NULL))
}
# Summarize numeric variables by generic horizon
h$gravel <- h$gravel-h$fine_gravel
hp.m <- melt(h, id.vars="hzname", measure.vars=c('clay', 'sand', 'fine_gravel', 'gravel', 'cobbles', 'stones', 'fragvoltot'))
hp.cs <- ddply(hp.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
hc.m <- melt(h, id.vars="hzname", measure.vars=c('phfield', 'd_value', 'd_chroma', 'm_value', 'm_chroma'))
hc.cs <- ddply(hc.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
thk <- ddply(h, .(peiid, hzname), summarize, thickness=sum(hzdepb-hzdept))
thk.m <- melt(thk, id.vars="hzname", measure.vars="thickness")
thk.cs <- ddply(thk.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
data.n <- ddply(h, .(hzname), .drop=T, summarize, n=length(hzname))
data.n
hc.cs
conditional.l.rv.h.summary <- function(x) {
variable <- unique(x$variable)
v <- na.omit(x$value) # extract column, from long-formatted input data
precision <- if(variable == 'phfield') 1 else 0
ci <- quantile(v, na.rm=TRUE, probs=p)
d <- data.frame(min=ci[1], low=ci[2], rv=ci[3], high=ci[4], max=ci[5], stringsAsFactors=FALSE) # combine into DF
d$range <- with(d, paste("(", paste(round(c(min, low, rv, high, max), precision), collapse=', '), ")", sep="")) # add 'range' column for pretty-printing
return(d[6])
}
h <- horizons(f)
h$d_chroma <- "NA"
h$m_chroma <- "NA"
# Horizon designations by generic horizon
if(length(na.exclude(f@horizons$genhz))>0){
addmargins(table(f@horizons$genhz, f@horizons$hzname, exclude=NULL))
}
# Summarize numeric variables by generic horizon
h$gravel <- h$gravel-h$fine_gravel
hp.m <- melt(h, id.vars="hzname", measure.vars=c('clay', 'sand', 'fine_gravel', 'gravel', 'cobbles', 'stones', 'fragvoltot'))
hp.cs <- ddply(hp.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
hc.m <- melt(h, id.vars="hzname", measure.vars=c('phfield', 'd_value', 'd_chroma', 'm_value', 'm_chroma'))
hc.cs <- ddply(hc.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
thk <- ddply(h, .(peiid, hzname), summarize, thickness=sum(hzdepb-hzdept))
thk.m <- melt(thk, id.vars="hzname", measure.vars="thickness")
thk.cs <- ddply(thk.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
data.n <- ddply(h, .(hzname), .drop=T, summarize, n=length(hzname))
hp.cs
hc.m <- melt(h, id.vars="hzname", measure.vars=c('phfield', 'd_value', 'd_chroma', 'm_value', 'm_chroma'))
hc.m
hc.cs <- ddply(hc.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
str(h)
h <- horizons(f)
h$d_chroma <- as.numeric("NA")
h$m_chroma <- as.numeric("NA")
str(h)
hc.m <- melt(h, id.vars="hzname", measure.vars=c('phfield', 'd_value', 'd_chroma', 'm_value', 'm_chroma'))
hc.cs <- ddply(hc.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
thk <- ddply(h, .(peiid, hzname), summarize, thickness=sum(hzdepb-hzdept))
thk.m <- melt(thk, id.vars="hzname", measure.vars="thickness")
thk.cs <- ddply(thk.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
data.n <- ddply(h, .(hzname), .drop=T, summarize, n=length(hzname))
# Range in characteristics for generic horizons (min, 10th, median, 90th, max)
print.xtable(rbind(cast(hp.cs, data.n)), hzname ~ variable, value='range'))
print.xtable(rbind(cast(hp.cs, data.n), hzname ~ variable, value='range'))
hp.csm <- merge(hp.cs, data.n, by="hzname")
print.xtable(cast(hp.csm, hzname ~ variable, value='range'))
cast(hp.csm, hzname ~ variable, value='range')
p <- c(0, 0.10, 0.5, 0.90, 1)
series <= "Genesee"
series <- "Genesee"
library(aqp)
library(soilDB)
library(reshape)
library(plyr)
library(lattice)
library(xtable)
f <- fetchNASIS()
f <- subsetProfiles(f, s="taxonname == series")
f@horizons$hzname[is.na(f@horizons$hzname)] <- "NA"
names(f@horizons)[15] <- "fragvoltot"
f@horizons$d_chroma <- as.numeric("NA")
h@horizons$m_chroma <- as.numeric("NA")
conditional.l.rv.h.summary <- function(x) {
variable <- unique(x$variable)
v <- na.omit(x$value) # extract column, from long-formatted input data
precision <- if(variable == 'phfield') 1 else 0
ci <- quantile(v, na.rm=TRUE, probs=p)
d <- data.frame(min=ci[1], low=ci[2], rv=ci[3], high=ci[4], max=ci[5], stringsAsFactors=FALSE) # combine into DF
d$range <- with(d, paste("(", paste(round(c(min, low, rv, high, max), precision), collapse=', '), ")", sep="")) # add 'range' column for pretty-printing
return(d[6])
}
f@horizons$d_chroma <- as.numeric("NA")
f@horizons$m_chroma <- as.numeric("NA")
# Summarize numeric variables by generic horizon
h$gravel <- h$gravel-h$fine_gravel
hp.m <- melt(h, id.vars="hzname", measure.vars=c('clay', 'sand', 'fine_gravel', 'gravel', 'cobbles', 'stones', 'fragvoltot'))
hp.cs <- ddply(hp.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
hc.m <- melt(h, id.vars="hzname", measure.vars=c('phfield', 'd_value', 'd_chroma', 'm_value', 'm_chroma'))
hc.cs <- ddply(hc.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
thk <- ddply(h, .(peiid, hzname), summarize, thickness=sum(hzdepb-hzdept))
thk.m <- melt(thk, id.vars="hzname", measure.vars="thickness")
thk.cs <- ddply(thk.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
data.n <- ddply(h, .(hzname), .drop=T, summarize, n=length(hzname))
# Range in characteristics for generic horizons (min, 10th, median, 90th, max)
hp.csm <- merge(hp.cs, data.n, by="hzname")
print.xtable(cast(hp.csm, hzname ~ variable, value='range'))
h <- horizons(f)
# Summarize numeric variables by generic horizon
h$gravel <- h$gravel-h$fine_gravel
hp.m <- melt(h, id.vars="hzname", measure.vars=c('clay', 'sand', 'fine_gravel', 'gravel', 'cobbles', 'stones', 'fragvoltot'))
hp.cs <- ddply(hp.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
hc.m <- melt(h, id.vars="hzname", measure.vars=c('phfield', 'd_value', 'd_chroma', 'm_value', 'm_chroma'))
hc.cs <- ddply(hc.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
thk <- ddply(h, .(peiid, hzname), summarize, thickness=sum(hzdepb-hzdept))
thk.m <- melt(thk, id.vars="hzname", measure.vars="thickness")
thk.cs <- ddply(thk.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
data.n <- ddply(h, .(hzname), .drop=T, summarize, n=length(hzname))
# Range in characteristics for generic horizons (min, 10th, median,
hp.csm <- merge(hp.cs, data.n, by="hzname")
print.xtable(cast(hp.csm, hzname ~ variable, value='range'))
data.n
rbind(hp.c, data.n)
hp.c <- cast(hp.cs, hzname ~ variable, value='range')
print.xtable(rbind(hp.c, data.n))
hp.c
data.n
cbind(hp.c, data.n)
hp.c <- cast(hp.cs, hzname ~ variable, value='range')
hp.cm <- merge(hp.c, data.n, by="hzname")
print.xtable(hp.cm))
print.xtable(hp.cm)
hp.cm
print.xtable(hp.cm)
str(hp.c)
str(hp.cm)
print(hp.cm)
library(xtable)
print.xtable(hp.cm)
help(print.xtable)
str(hp.csm)
str(hp.cm)
print.xtable(hp.c)
str(hp.c)
str(hp.cs)
help(cast)
print.xtable(hp.cs)
print.xtable(hp.cm)
print.xtable(list(hp.cm))
print.xtable(as.list(hp.cm))
print.xtable(table(hp.cm))
hp.cm
str(hp.cm)
hp.cm$n <- as.factor(hp.cm$n)
str(hp.cm)
print.xtable((hp.cm))
data.n <- ddply(h, .(hzname), .drop=T, summarize, n=as.character(length(hzname)))
# Range in characteristics for generic horizons (min, 10th, median, 90th, max)
hp.c <- cast(hp.cs, hzname ~ variable, value='range')
hp.cm <- merge(hp.c, data.n, by="hzname")
print.xtable(hp.cm)
list(hp.cm)
print.xtable(list(hp.cm))
data.n <- ddply(h, .(hzname), .drop=T, summarize, n=as.character(length(hzname)))
# Range in characteristics for generic horizons (min, 10th, median, 90th, max)
hp.c <- cast(hp.cs, hzname ~ variable, value='range')
hp.cm <- merge(hp.c, data.n, by="hzname")
print.xtable(hp.cm)
bwplot(hzname ~ value|variable, data=rbind(h.cm, thk.m), scales=list(x="free"))
bwplot(hzname ~ value|variable, data=rbind(h.c, thk.m), scales=list(x="free"))
bwplot(hzname ~ value|variable, data=rbind(hp.c, thk.m), scales=list(x="free"))
bwplot(hzname ~ value|variable, data=rbind(hp.m, thk.m), scales=list(x="free"))
View(hp.cm)
plot(f, label="pedon_id")
h <- horizons(f)
# Horizon designations by generic horizon
if(length(na.exclude(f@horizons$genhz))>0){
addmargins(table(f@horizons$genhz, f@horizons$hzname, exclude=NULL))
}
# Summarize numeric variables by generic horizon
h$gravel <- h$gravel-h$fine_gravel
hp.m <- melt(h, id.vars="hzname", measure.vars=c('clay', 'sand', 'fine_gravel', 'gravel', 'cobbles', 'stones', 'fragvoltot'))
hp.cs <- ddply(hp.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
hc.m <- melt(h, id.vars="hzname", measure.vars=c('phfield', 'd_value', 'd_chroma', 'm_value', 'm_chroma'))
hc.cs <- ddply(hc.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
thk <- ddply(h, .(peiid, hzname), summarize, thickness=sum(hzdepb-hzdept))
thk.m <- melt(thk, id.vars="hzname", measure.vars="thickness")
thk.cs <- ddply(thk.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
data.n <- ddply(h, .(hzname), .drop=T, summarize, n=as.character(length(hzname)))
# Range in characteristics for generic horizons (min, 10th, median, 90th, max)
hp.c <- cast(hp.cs, hzname ~ variable, value='range')
hp.cm <- merge(hp.c, data.n, by="hzname")
print.xtable(hp.cm)
# Box plots of numeric variables by generic horizon
bwplot(hzname ~ value|variable, data=rbind(hp.m, thk.m), scales=list(x="free"))
# Texture by generic horizon
print.xtable(addmargins(table(h$hzname, h$texture_class, exclude=NULL)))
# Tex Mod & Class by generic horizon
addmargins(table(h$hzname, h$texture, exclude=NULL))
addmargins(table(h$hzname, h$d_hue, exclude=NULL))
# Moist hue by generic horizon
addmargins(table(h$hzname, h$m_hue, exclude=NULL))
# Dry value by generic horizon
addmargins(table(h$hzname, h$d_value, exclude=NULL))
# Moist value by generic horizon
addmargins(table(h$hzname, h$m_value, exclude=NULL))
# Dry chroma by generic horizon
addmargins(table(h$hzname, h$d_chroma, exclude=NULL))
# Moist chroma by generic horizon
addmargins(table(h$hzname, h$m_chroma, exclude=NULL))
# Effervescence by generic horizon
addmargins(table(h$hzname, h$effervescence, exclude=NULL))
addmargins(table(h$hzname, h$d_hue, exclude=NULL))
addmargins(table(h$hzname, h$d_hue))
table(h$hzname, h$d_hue)
str(h)
f <- fetchNASIS()
f <- subsetProfiles(f, s="taxonname == series")
f@horizons$hzname[is.na(f@horizons$hzname)] <- "NA"
names(f@horizons)[15] <- "fragvoltot"
f@horizons$d_chroma <- as.numeric("NA")
f@horizons$m_chroma <- as.numeric("NA")
# Function
conditional.l.rv.h.summary <- function(x) {
variable <- unique(x$variable)
v <- na.omit(x$value) # extract column, from long-formatted input data
precision <- if(variable == 'phfield') 1 else 0
ci <- quantile(v, na.rm=TRUE, probs=p)
d <- data.frame(min=ci[1], low=ci[2], rv=ci[3], high=ci[4], max=ci[5], stringsAsFactors=FALSE) # combine into DF
d$range <- with(d, paste("(", paste(round(c(min, low, rv, high, max), precision), collapse=', '), ")", sep="")) # add 'range' column for pretty-printing
return(d[6])
}
```
## Summary of Sites
```{r, echo=FALSE}
# Site information
s <- site(f)
subset(s, select=c("pedon_id", "taxonname", "pedon_type", "describer"))
# Summarize surface rock fragments
s$total_srf <- s$surface_gravel+s$surface_cobbles+s$surface_stones+s$surface_boulders+s$surface_flagstones+s$surface_channers
s$gravel <- s$surface_fgravel-s$surface_gravel
s.m <- melt(s, measure.vars=c("total_srf", "surface_fgravel", "surface_gravel", "surface_cobbles", "surface_stones", "surface_boulders", "surface_channers", "surface_flagstones"))
s.summary <- ddply(s.m, .(variable), .fun=conditional.l.rv.h.summary)
# Box plots of surface rock fragments
bwplot(variable~value, data=s.m, scales=list(x="free"), xlab="percent")
# Range in characteristics of surface rock fragments (min, 10th, median, 90th, max)
format(cast(s.summary, ~variable, value='range'), justify="centre")
```
## Summary of Pedons
```{r, echo=FALSE, results='asis', options("xtable.type" = "html")}
plot(f, label="pedon_id")
h <- horizons(f)
# Horizon designations by generic horizon
if(length(na.exclude(f@horizons$genhz))>0){
addmargins(table(f@horizons$genhz, f@horizons$hzname, exclude=NULL))
}
# Summarize numeric variables by generic horizon
h$gravel <- h$gravel-h$fine_gravel
hp.m <- melt(h, id.vars="hzname", measure.vars=c('clay', 'sand', 'fine_gravel', 'gravel', 'cobbles', 'stones', 'fragvoltot'))
hp.cs <- ddply(hp.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
hc.m <- melt(h, id.vars="hzname", measure.vars=c('phfield', 'd_value', 'd_chroma', 'm_value', 'm_chroma'))
hc.cs <- ddply(hc.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
thk <- ddply(h, .(peiid, hzname), summarize, thickness=sum(hzdepb-hzdept))
thk.m <- melt(thk, id.vars="hzname", measure.vars="thickness")
thk.cs <- ddply(thk.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
data.n <- ddply(h, .(hzname), .drop=T, summarize, n=as.character(length(hzname)))
# Range in characteristics for generic horizons (min, 10th, median, 90th, max)
hp.c <- cast(hp.cs, hzname ~ variable, value='range')
hp.cm <- merge(hp.c, data.n, by="hzname")
print.xtable(hp.cm)
# Box plots of numeric variables by generic horizon
bwplot(hzname ~ value|variable, data=rbind(hp.m, thk.m), scales=list(x="free"))
# Texture by generic horizon
print.xtable(addmargins(table(h$hzname, h$texture_class, exclude=NULL)))
# Tex Mod & Class by generic horizon
addmargins(table(h$hzname, h$texture, exclude=NULL))
# Dry hue by generic horizon
addmargins(table(h$hzname, h$d_hue, exclude=NULL))
# Moist hue by generic horizon
addmargins(table(h$hzname, h$m_hue, exclude=NULL))
# Dry value by generic horizon
addmargins(table(h$hzname, h$d_value, exclude=NULL))
# Moist value by generic horizon
addmargins(table(h$hzname, h$m_value, exclude=NULL))
# Dry chroma by generic horizon
addmargins(table(h$hzname, h$d_chroma, exclude=NULL))
# Moist chroma by generic horizon
addmargins(table(h$hzname, h$m_chroma, exclude=NULL))
# Effervescence by generic horizon
addmargins(table(h$hzname, h$effervescence, exclude=NULL))
bwplot(diag_kind ~ value|variable, data=diag.m, scales=list(x="free"), xlab="cm")
diag.thk <- ddply(f@diagnostic, .(peiid, diag_kind), summarize, thickness=sum(featdepb-featdept))
diag.m <- melt(f@diagnostic, id.vars="diag_kind", measure.vars=c('featdept', 'featdepb'))
diag.thk.m <- melt(diag.thk, id.vars="diag_kind", measure.vars='thickness')
diag.m <- rbind(diag.m, diag.thk.m)
d.cs <- ddply(diag.m, .(variable, diag_kind), .fun=conditional.l.rv.h.summary)
format(cast(d.cs, diag_kind ~ variable, value='range'), justify="centre")
bwplot(diag_kind ~ value|variable, data=diag.m, scales=list(x="free"), xlab="cm")
f
series
series <- "Lecyr"
# load NASIS data
f <- fetchNASIS()
f <- subsetProfiles(f, s="taxonname == series")
f@horizons$hzname[is.na(f@horizons$hzname)] <- "NA"
names(f@horizons)[15] <- "fragvoltot"
f@horizons$d_chroma <- as.numeric("NA")
f@horizons$m_chroma <- as.numeric("NA")
plot(f, label="pedon_id")
h <- horizons(f)
# Horizon designations by generic horizon
if(length(na.exclude(f@horizons$genhz))>0){
addmargins(table(f@horizons$genhz, f@horizons$hzname, exclude=NULL))
}
# Summarize numeric variables by generic horizon
h$gravel <- h$gravel-h$fine_gravel
hp.m <- melt(h, id.vars="hzname", measure.vars=c('clay', 'sand', 'fine_gravel', 'gravel', 'cobbles', 'stones', 'fragvoltot'))
hp.cs <- ddply(hp.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
hc.m <- melt(h, id.vars="hzname", measure.vars=c('phfield', 'd_value', 'd_chroma', 'm_value', 'm_chroma'))
hc.cs <- ddply(hc.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
thk <- ddply(h, .(peiid, hzname), summarize, thickness=sum(hzdepb-hzdept))
thk.m <- melt(thk, id.vars="hzname", measure.vars="thickness")
thk.cs <- ddply(thk.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
data.n <- ddply(h, .(hzname), .drop=T, summarize, n=as.character(length(hzname)))
print.xtable(addmargins(table(f@horizons$hzname, f@horizons$hzname, exclude=NULL)))
table(f@horizons$hzname, f@horizons$hzname, exclude=NULL)
addmargins(table(f@horizons$hzname, f@horizons$hzname, exclude=NULL))
print.xtable(addmargins(table(f@horizons$hzname, f@horizons$hzname, exclude=NULL)))
print.xtable(addmargins(table(f@horizons$hzname, f@horizons$hzname)))
addmargins(table(f@horizons$hzname, f@horizons$hzname))
print.xtable(addmargins(table(f@horizons$hzname, f@horizons$hzname)))
xtable(addmargins(table(f@horizons$hzname, f@horizons$hzname)))
print.xtable(addmargins(table(f@horizons$hzname, f@horizons$hzname, exclude=NULL)))
print.xtable(xtable(addmargins(table(f@horizons$hzname, f@horizons$hzname, exclude=NULL))))
xtable(addmargins(table(f@horizons$hzname, f@horizons$hzname)))
print.xtable(xtable(addmargins(table(f@horizons$hzname, f@horizons$hzname))))
print.xtable(xtable(addmargins(table(f@horizons$hzname, f@horizons$hzname))))
print.xtable(hp.cm)
print.xtable(addmargins(table(h$hzname, h$texture_class, exclude=NULL)))
print(xtable(addmargins(table(h$hzname, h$texture_class, exclude=NULL))))
print(xtable(addmargins(table(h$hzname, h$texture_class))))
