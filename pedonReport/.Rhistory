if(length(na.exclude(f@horizons$genhz))>0){
addmargins(table(f@horizons$genhz, f@horizons$hzname, exclude=NULL))
}
# Summarize numeric variables by generic horizon
h$gravel <- h$gravel-h$fine_gravel
hp.m <- melt(h, id.vars="hzname", measure.vars=c('clay', 'sand', 'fine_gravel', 'gravel', 'cobbles', 'stones', 'fragvoltot'))
hp.cs <- ddply(hp.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
hc.m <- melt(h, id.vars="hzname", measure.vars=c('phfield', 'd_value', 'd_chroma', 'm_value', 'm_chroma'))
hc.cs <- ddply(hc.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
thk <- ddply(h, .(peiid, hzname), summarize, thickness=sum(hzdepb-hzdept))
thk.m <- melt(thk, id.vars="hzname", measure.vars="thickness")
thk.cs <- ddply(thk.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
data.n <- ddply(h, .(hzname), .drop=T, summarize, n=as.character(length(hzname)))
# Range in characteristics for generic horizons (min, 10th, median, 90th, max)
hp.c <- cast(hp.cs, hzname ~ variable, value='range')
hp.cm <- merge(hp.c, data.n, by="hzname")
print.xtable(hp.cm)
# Box plots of numeric variables by generic horizon
bwplot(hzname ~ value|variable, data=rbind(hp.m, thk.m), scales=list(x="free"))
# Texture by generic horizon
print.xtable(addmargins(table(h$hzname, h$texture_class, exclude=NULL)))
# Tex Mod & Class by generic horizon
addmargins(table(h$hzname, h$texture, exclude=NULL))
# Dry hue by generic horizon
addmargins(table(h$hzname, h$d_hue, exclude=NULL))
# Moist hue by generic horizon
addmargins(table(h$hzname, h$m_hue, exclude=NULL))
# Dry value by generic horizon
addmargins(table(h$hzname, h$d_value, exclude=NULL))
# Moist value by generic horizon
addmargins(table(h$hzname, h$m_value, exclude=NULL))
# Dry chroma by generic horizon
addmargins(table(h$hzname, h$d_chroma, exclude=NULL))
# Moist chroma by generic horizon
addmargins(table(h$hzname, h$m_chroma, exclude=NULL))
# Effervescence by generic horizon
addmargins(table(h$hzname, h$effervescence, exclude=NULL))
bwplot(diag_kind ~ value|variable, data=diag.m, scales=list(x="free"), xlab="cm")
diag.thk <- ddply(f@diagnostic, .(peiid, diag_kind), summarize, thickness=sum(featdepb-featdept))
diag.m <- melt(f@diagnostic, id.vars="diag_kind", measure.vars=c('featdept', 'featdepb'))
diag.thk.m <- melt(diag.thk, id.vars="diag_kind", measure.vars='thickness')
diag.m <- rbind(diag.m, diag.thk.m)
d.cs <- ddply(diag.m, .(variable, diag_kind), .fun=conditional.l.rv.h.summary)
format(cast(d.cs, diag_kind ~ variable, value='range'), justify="centre")
bwplot(diag_kind ~ value|variable, data=diag.m, scales=list(x="free"), xlab="cm")
f
series
series <- "Lecyr"
# load NASIS data
f <- fetchNASIS()
f <- subsetProfiles(f, s="taxonname == series")
f@horizons$hzname[is.na(f@horizons$hzname)] <- "NA"
names(f@horizons)[15] <- "fragvoltot"
f@horizons$d_chroma <- as.numeric("NA")
f@horizons$m_chroma <- as.numeric("NA")
plot(f, label="pedon_id")
h <- horizons(f)
# Horizon designations by generic horizon
if(length(na.exclude(f@horizons$genhz))>0){
addmargins(table(f@horizons$genhz, f@horizons$hzname, exclude=NULL))
}
# Summarize numeric variables by generic horizon
h$gravel <- h$gravel-h$fine_gravel
hp.m <- melt(h, id.vars="hzname", measure.vars=c('clay', 'sand', 'fine_gravel', 'gravel', 'cobbles', 'stones', 'fragvoltot'))
hp.cs <- ddply(hp.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
hc.m <- melt(h, id.vars="hzname", measure.vars=c('phfield', 'd_value', 'd_chroma', 'm_value', 'm_chroma'))
hc.cs <- ddply(hc.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
thk <- ddply(h, .(peiid, hzname), summarize, thickness=sum(hzdepb-hzdept))
thk.m <- melt(thk, id.vars="hzname", measure.vars="thickness")
thk.cs <- ddply(thk.m, .(variable, hzname), .fun=conditional.l.rv.h.summary)
data.n <- ddply(h, .(hzname), .drop=T, summarize, n=as.character(length(hzname)))
print.xtable(addmargins(table(f@horizons$hzname, f@horizons$hzname, exclude=NULL)))
table(f@horizons$hzname, f@horizons$hzname, exclude=NULL)
addmargins(table(f@horizons$hzname, f@horizons$hzname, exclude=NULL))
print.xtable(addmargins(table(f@horizons$hzname, f@horizons$hzname, exclude=NULL)))
print.xtable(addmargins(table(f@horizons$hzname, f@horizons$hzname)))
addmargins(table(f@horizons$hzname, f@horizons$hzname))
print.xtable(addmargins(table(f@horizons$hzname, f@horizons$hzname)))
xtable(addmargins(table(f@horizons$hzname, f@horizons$hzname)))
print.xtable(addmargins(table(f@horizons$hzname, f@horizons$hzname, exclude=NULL)))
print.xtable(xtable(addmargins(table(f@horizons$hzname, f@horizons$hzname, exclude=NULL))))
xtable(addmargins(table(f@horizons$hzname, f@horizons$hzname)))
print.xtable(xtable(addmargins(table(f@horizons$hzname, f@horizons$hzname))))
print.xtable(xtable(addmargins(table(f@horizons$hzname, f@horizons$hzname))))
print.xtable(hp.cm)
print.xtable(addmargins(table(h$hzname, h$texture_class, exclude=NULL)))
print(xtable(addmargins(table(h$hzname, h$texture_class, exclude=NULL))))
print(xtable(addmargins(table(h$hzname, h$texture_class))))
help(table)
series <- "Genesee"
p <- c(0, 0.10, 0.5, 0.90, 1)
library(aqp)
library(soilDB)
library(reshape)
library(plyr)
library(lattice)
library(xtable)
# source custom R functions
source("C:/Users/Stephen/Documents/soilRwb/pedonReport/genhz_rules.R")
# load NASIS data
f <- fetchNASIS()
f <- subsetProfiles(f, s="taxonname == series")
f@horizons$hzname[is.na(f@horizons$hzname)] <- "NA"
horizons(f)$genhz <- generalize.hz(f@horizons$hzname, ghr$genesee$n, ghr$genesee$p)
names(f@horizons)[15] <- "fragvoltotc"
names(f@horizons)[16] <- "fragvoltot"
d_rgb <- horizons(f)[, c("d_r", "d_g", "d_b")]
d_munsell <- rgb2munsell(d_rgb)
m_rgb <- f@horizons[, c("m_r", "m_g", "m_b")]
m_munsell <- rgb2munsell(m_rgb)
f@horizons$d_hue <- as.character(d_munsell$hue)
f@horizons$d_value <- as.integer(d_munsell$value)
f@horizons$d_chroma <- as.integer(d_munsell$chroma)
f@horizons$m_hue <- as.character(m_munsell$hue)
f@horizons$m_value <- as.integer(m_munsell$value)
f@horizons$m_chroma <- as.integer(d_munsell$chroma)
naReplace <- function(h){
l <- list()
for(i in seq(names(h))){
if(class(h[,i])=="character") {l[[i]] <- replace(h[,i], is.na(h[,i]), "NA")} else(l[[i]] <-  h[,i])
}
l <- data.frame(l, stringsAsFactors=FALSE)
names(l) <- names(h)
return(l)
}
h2 <- naReplace(f@horizons)
f@horizons <- h2
h <- horizons(f)
s <- site(f)
# Function
conditional.l.rv.h.summary <- function(x) {
variable <- unique(x$variable)
v <- na.omit(x$value) # extract column, from long-formatted input data
precision <- if(variable == 'phfield') 1 else 0
ci <- quantile(v, na.rm=TRUE, probs=p)
d <- data.frame(min=ci[1], low=ci[2], rv=ci[3], high=ci[4], max=ci[5], stringsAsFactors=FALSE) # combine into DF
d$range <- with(d, paste("(", paste(round(c(min, low, rv, high, max), precision), collapse=', '), ")", sep="")) # add 'range' column for pretty-printing
return(d[6])
}
addmargins(table(h$genhz, h$texture))
addmargins(table(h$genhz, h$texture, usNA="ifany"))
str(h)
addmargins(table(h$genhz, h$texture, useNA="ifany"))
f <- fetchNASIS()
f <- subsetProfiles(f, s="taxonname == series")
h <- horizons(f)
addmargins(table(h$hzname, h$texture, useNA="ifany"))
help(lattice)
help(bwplot)
levels(f$genhz)
f@horizons$hzname[is.na(f@horizons$hzname)] <- "NA"
horizons(f)$genhz <- generalize.hz(f@horizons$hzname, ghr$genesee$n, ghr$genesee$p)
names(f@horizons)[15] <- "fragvoltotc"
names(f@horizons)[16] <- "fragvoltot"
d_rgb <- horizons(f)[, c("d_r", "d_g", "d_b")]
d_munsell <- rgb2munsell(d_rgb)
m_rgb <- f@horizons[, c("m_r", "m_g", "m_b")]
m_munsell <- rgb2munsell(m_rgb)
f@horizons$d_hue <- as.character(d_munsell$hue)
f@horizons$d_value <- as.integer(d_munsell$value)
f@horizons$d_chroma <- as.integer(d_munsell$chroma)
f@horizons$m_hue <- as.character(m_munsell$hue)
f@horizons$m_value <- as.integer(m_munsell$value)
f@horizons$m_chroma <- as.integer(d_munsell$chroma)
naReplace <- function(h){
l <- list()
for(i in seq(names(h))){
if(class(h[,i])=="character") {l[[i]] <- replace(h[,i], is.na(h[,i]), "NA")} else(l[[i]] <-  h[,i])
}
l <- data.frame(l, stringsAsFactors=FALSE)
names(l) <- names(h)
return(l)
}
h2 <- naReplace(f@horizons)
f@horizons <- h2
h <- horizons(f)
s <- site(f)
levels(f$genhz)
factor(f$genhz)
f <- subsetProfiles(f, s="taxonname == series")
f@horizons$hzname[is.na(f@horizons$hzname)] <- "NA"
horizons(f)$genhz <- generalize.hz(f@horizons$hzname, ghr$genesee$n, ghr$genesee$p)
names(f@horizons)[15] <- "fragvoltotc"
names(f@horizons)[16] <- "fragvoltot"
levels(f$genhz)
f <- fetchNASIS()
f <- subsetProfiles(f, s="taxonname == series")
f@horizons$hzname[is.na(f@horizons$hzname)] <- "NA"
horizons(f)$genhz <- generalize.hz(f@horizons$hzname, ghr$genesee$n, ghr$genesee$p)
names(f@horizons)[15] <- "fragvoltotc"
names(f@horizons)[16] <- "fragvoltot"
d_rgb <- horizons(f)[, c("d_r", "d_g", "d_b")]
d_munsell <- rgb2munsell(d_rgb)
m_rgb <- f@horizons[, c("m_r", "m_g", "m_b")]
m_munsell <- rgb2munsell(m_rgb)
f@horizons$d_hue <- as.character(d_munsell$hue)
f@horizons$d_value <- as.integer(d_munsell$value)
f@horizons$d_chroma <- as.integer(d_munsell$chroma)
f@horizons$m_hue <- as.character(m_munsell$hue)
f@horizons$m_value <- as.integer(m_munsell$value)
f@horizons$m_chroma <- as.integer(d_munsell$chroma)
naReplace <- function(h){
l <- list()
for(i in seq(names(h))){
if(class(h[,i])=="character") {l[[i]] <- replace(h[,i], is.na(h[,i]), "NA")} else(l[[i]] <-  h[,i])
}
l <- data.frame(l, stringsAsFactors=FALSE)
names(l) <- names(h)
return(l)
}
levels(f$genhz)
source("C:/Users/Stephen/Documents/soilRwb/trunk/pedonReport/genhz_rules.R")
# source custom R functions
source("C:/Users/Stephen.roecker/Documents/soilRwb/trunk/pedonReport/genhz_rules.R")
# load NASIS data
f <- fetchNASIS()
f <- subsetProfiles(f, s="taxonname == series")
f@horizons$hzname[is.na(f@horizons$hzname)] <- "NA"
horizons(f)$genhz <- generalize.hz(f@horizons$hzname, ghr$genesee$n, ghr$genesee$p)
names(f@horizons)[15] <- "fragvoltotc"
names(f@horizons)[16] <- "fragvoltot"
d_rgb <- horizons(f)[, c("d_r", "d_g", "d_b")]
d_munsell <- rgb2munsell(d_rgb)
m_rgb <- f@horizons[, c("m_r", "m_g", "m_b")]
m_munsell <- rgb2munsell(m_rgb)
f@horizons$d_hue <- as.character(d_munsell$hue)
f@horizons$d_value <- as.integer(d_munsell$value)
f@horizons$d_chroma <- as.integer(d_munsell$chroma)
f@horizons$m_hue <- as.character(m_munsell$hue)
f@horizons$m_value <- as.integer(m_munsell$value)
f@horizons$m_chroma <- as.integer(d_munsell$chroma)
naReplace <- function(h){
l <- list()
for(i in seq(names(h))){
if(class(h[,i])=="character") {l[[i]] <- replace(h[,i], is.na(h[,i]), "NA")} else(l[[i]] <-  h[,i])
}
l <- data.frame(l, stringsAsFactors=FALSE)
names(l) <- names(h)
return(l)
}
getwd()
source("genhz_rules.R")
# load NASIS data
f <- fetchNASIS()
f <- subsetProfiles(f, s="taxonname == series")
f@horizons$hzname[is.na(f@horizons$hzname)] <- "NA"
horizons(f)$genhz <- generalize.hz(f@horizons$hzname, ghr$genesee$n, ghr$genesee$p)
names(f@horizons)[15] <- "fragvoltotc"
names(f@horizons)[16] <- "fragvoltot"
d_rgb <- horizons(f)[, c("d_r", "d_g", "d_b")]
d_munsell <- rgb2munsell(d_rgb)
m_rgb <- f@horizons[, c("m_r", "m_g", "m_b")]
m_munsell <- rgb2munsell(m_rgb)
f@horizons$d_hue <- as.character(d_munsell$hue)
f@horizons$d_value <- as.integer(d_munsell$value)
f@horizons$d_chroma <- as.integer(d_munsell$chroma)
f@horizons$m_hue <- as.character(m_munsell$hue)
f@horizons$m_value <- as.integer(m_munsell$value)
f@horizons$m_chroma <- as.integer(d_munsell$chroma)
naReplace <- function(h){
l <- list()
for(i in seq(names(h))){
if(class(h[,i])=="character") {l[[i]] <- replace(h[,i], is.na(h[,i]), "NA")} else(l[[i]] <-  h[,i])
}
l <- data.frame(l, stringsAsFactors=FALSE)
names(l) <- names(h)
return(l)
}
levels(f$genhz)
ghr$genesee$n
addmargins(table(f@horizons$genhz, f@horizons$hzname))
library(Rcmdr)
f <- fetchNASIS()
help(knit2html)
library(knitr)
help(knit2html)
library(gridExtra)
install.packages("gridExtra")
install.packages("latticeExtra")
f <- fetchNASIS()
library(aqp)
library(soilDB)
library(reshape)
library(plyr)
library(lattice)
library(xtable)
f <- fetchNASIS()
f <- subsetProfiles(f, s="taxonname == series")
names(f)
summary(h)
summary(f@horizons)
names(h)
f <- fetchNASIS()
f <- subsetProfiles(f, s="taxonname == series")
h <- horizons(f)
s <- site(f)
h$hzname[is.na(h$hzname)] <- "NA"
h$genhz <- generalize.hz(h$hzname, ghr$genesee$n, ghr$genesee$p)
names(h$total_frags_pct_cal) <- "fragvoltotc"
names(h$total_frags_pct) <- "fragvoltot"
d_rgb <- horizons(f)[, c("d_r", "d_g", "d_b")]
d_munsell <- rgb2munsell(d_rgb)
m_rgb <- h[, c("m_r", "m_g", "m_b")]
m_munsell <- rgb2munsell(m_rgb)
h$d_hue <- as.character(d_munsell$hue)
h$d_value <- as.integer(d_munsell$value)
h$d_chroma <- as.integer(d_munsell$chroma)
h$m_hue <- as.character(m_munsell$hue)
h$m_value <- as.integer(m_munsell$value)
h$m_chroma <- as.integer(d_munsell$chroma)
naReplace <- function(h){
l <- list()
for(i in seq(names(h))){
if(class(h[,i])=="character") {l[[i]] <- replace(h[,i], is.na(h[,i]), "NA")} else(l[[i]] <-  h[,i])
}
l <- data.frame(l, stringsAsFactors=FALSE)
names(l) <- names(h)
return(l)
}
h <- naReplace(h)
names(h)
f <- subsetProfiles(f, s="taxonname == series")
h <- horizons(f)
s <- site(f)
h$hzname[is.na(h$hzname)] <- "NA"
h$genhz <- generalize.hz(h$hzname, ghr$genesee$n, ghr$genesee$p)
names(h$total_frags_pct_cal) <- "fragvoltotc"
names(h$total_frags_pct) <- "fragvoltot"
d_rgb <- horizons(f)[, c("d_r", "d_g", "d_b")]
d_munsell <- rgb2munsell(d_rgb)
m_rgb <- h[, c("m_r", "m_g", "m_b")]
m_munsell <- rgb2munsell(m_rgb)
h$d_hue <- as.character(d_munsell$hue)
h$d_value <- as.integer(d_munsell$value)
h$d_chroma <- as.integer(d_munsell$chroma)
h$m_hue <- as.character(m_munsell$hue)
h$m_value <- as.integer(m_munsell$value)
h$m_chroma <- as.integer(d_munsell$chroma)
names(h)
names(h)$total_frags_pct_cal <- "fragvoltotc"
names(h)$total_frags_pct <- "fragvoltot"
names(h)["total_frags_pct_cal"] <- "fragvoltotc"
names(h)
names(h)["clay"] <- "test"
names(h)[,"clay"] <- "test"
names(h["clay"]) <- "test"
names(h["total_frags_pct_cal"]) <- "fragvoltotc"
names(h["total_frags_pct"]) <- "fragvoltot"
h <- horizons(f)
s <- site(f)
h$hzname[is.na(h$hzname)] <- "NA"
h$genhz <- generalize.hz(h$hzname, ghr$genesee$n, ghr$genesee$p)
names(h["total_frags_pct_cal"]) <- "fragvoltotc"
names(h["total_frags_pct"]) <- "fragvoltot"
d_rgb <- horizons(f)[, c("d_r", "d_g", "d_b")]
d_munsell <- rgb2munsell(d_rgb)
m_rgb <- h[, c("m_r", "m_g", "m_b")]
m_munsell <- rgb2munsell(m_rgb)
h$d_hue <- as.character(d_munsell$hue)
h$d_value <- as.integer(d_munsell$value)
h$d_chroma <- as.integer(d_munsell$chroma)
h$m_hue <- as.character(m_munsell$hue)
h$m_value <- as.integer(m_munsell$value)
h$m_chroma <- as.integer(d_munsell$chroma)
naReplace <- function(h){
l <- list()
for(i in seq(names(h))){
if(class(h[,i])=="character") {l[[i]] <- replace(h[,i], is.na(h[,i]), "NA")} else(l[[i]] <-  h[,i])
}
l <- data.frame(l, stringsAsFactors=FALSE)
names(l) <- names(h)
return(l)
}
h <- naReplace(h)
names(h)
names(h["total_frags_pct_cal"]) <- "fragvoltotc"
names(h["total_frags_pct"]) <- "fragvoltot"
names(h)
help(names)
names(h[15]) <- "fragvoltotc"
names(h[16]) <- "fragvoltot"
names(h)[15] <- "fragvoltotc"
names(h)[16] <- "fragvoltot"
names(h)
series
series <- "Lecyr"
```
```{r load packages, include=FALSE}
# load libraries
library(aqp)
library(soilDB)
library(reshape)
library(plyr)
library(lattice)
library(xtable)
```
```{r fetch and format, load-data, echo=FALSE, warning=FALSE}
# source custom R functions
source("genhz_rules.R")
p <- c(0, 0.10, 0.5, 0.90, 1)
# load NASIS data
f <- fetchNASIS()
f <- subsetProfiles(f, s="taxonname == series")
str(f@horizons)
h <- horizons(f)
s <- site(f)
h$hzname[is.na(h$hzname)] <- "NA"
h$genhz <- generalize.hz(h$hzname, ghr$genesee$n, ghr$genesee$p)
names(h)[15] <- "fragvoltotc"
names(h)[16] <- "fragvoltot"
d_rgb <- horizons(f)[, c("d_r", "d_g", "d_b")]
d_munsell <- rgb2munsell(d_rgb)
m_rgb <- h[, c("m_r", "m_g", "m_b")]
m_munsell <- rgb2munsell(m_rgb)
h$d_hue <- as.character(d_munsell$hue)
h$d_value <- as.integer(d_munsell$value)
h$d_chroma <- as.integer(d_munsell$chroma)
h$m_hue <- as.character(m_munsell$hue)
h$m_value <- as.integer(m_munsell$value)
h$m_chroma <- as.integer(d_munsell$chroma)
naReplace <- function(h){
l <- list()
for(i in seq(names(h))){
if(class(h[,i])=="character") {l[[i]] <- replace(h[,i], is.na(h[,i]), "NA")} else(l[[i]] <-  h[,i])
}
l <- data.frame(l, stringsAsFactors=FALSE)
names(l) <- names(h)
return(l)
}
h <- naReplace(h)
genhz.thk <- ddply(h, .(phiid, genhz), summarize, thickness=sum(hzdepb-hzdept))
genhz.m <- melt(h, id.vars="genhz", measure.vars=c('hzdept', 'hzdepb'))
genhz.thk.m <- melt(genhz.thk, id.vars="genhz", measure.vars='thickness')
genhz.m <- rbind(genhz.m, genhz.thk.m)
d.cs <- ddply(genhz.m, .(variable, genhz), .fun=conditional.l.rv.h.summary)
print(xtable(cast(d.cs, genhz ~ variable, value='range'), digits=0), type="html")
levels(h)
levels(h$genhz)
levels(h$genhz)[6:1]
levels(h$genhz)[length(levels(h$genhz):1]
levels(h$genhz)[length(levels(h$genhz)):1]
bwplot(factor(genhz, levels=levels(h$genhz)[length(levels(h$genhz)):1]) ~ value|variable, data=genhz.m, scales=list(x="free"), xlab="cm", horizontal=T)
s$total_srf <- s$surface_gravel+s$surface_cobbles+s$surface_stones+s$surface_boulders+s$surface_flagstones+s$surface_channers
summary(s)
s$surface_gravel+s$surface_cobbles+s$surface_stones+s$surface_boulders+s$surface_flagstones+s$surface_channers
s$surface_gravel
s$surface_gravel+s$surface_cobbles
s$surface_gravel+s$surface_cobbles+s$surface_stones
summary(s)
naReplace <- function(s){
l <- list()
for(i in seq(names(s))){
if(class(s[,i])=="numeric") {l[[i]] <- replace(s[,i], is.na(s[,i]), "NA")} else(l[[i]] <-  s[,i])
}
l <- data.frame(l, stringsAsFactors=FALSE)
names(l) <- names(s)
return(l)
}
s <- naReplace(s)
summary(s)
s <- site(f)
summary(s)
s.rf <- subset(s, select=c("surface_gravel", "surface_cobbles", "surface_stones", "surface_boulders", "surface_flagstones", "surface_channers"))
s.rf
s.rf <- replace(s.rf, is.na(s.rf), 0)
s.rf
# Summarize surface rock fragments
s.rf <- subset(s, select=c("surface_gravel", "surface_cobbles", "surface_stones", "surface_boulders", "surface_flagstones", "surface_channers"))
s.rf <- replace(s.rf, is.na(s.rf), 0)
s.rf$total_srf <- s.rf$surface_gravel+s.rf$surface_cobbles+s.rf$surface_stones+s.rf$surface_boulders+s.rf$surface_flagstones+s.rf$surface_channers
s.rf$gravel <- s.rf$surface_fgravel-s.rf$surface_gravel
s.m <- melt(s.rf, measure.vars=c("total_srf", "surface_fgravel", "surface_gravel", "surface_cobbles", "surface_stones", "surface_boulders", "surface_channers", "surface_flagstones"))
s.summary <- ddply(s.m, .(variable), .fun=conditional.l.rv.h.summary)
s.rf$total_srf <- s.rf$surface_gravel+s.rf$surface_cobbles+s.rf$surface_stones+s.rf$surface_boulders+s.rf$surface_flagstones+s.rf$surface_channers
s.rf$surface_gravel <- s.rf$surface_fgravel-s.rf$surface_gravel
s.m <- melt(s.rf, measure.vars=c("total_srf", "surface_fgravel", "surface_gravel", "surface_cobbles", "surface_stones", "surface_boulders", "surface_channers", "surface_flagstones"))
s.summary <- ddply(s.m, .(variable), .fun=conditional.l.rv.h.summary)
s <- site(f)
s.rf$total_srf <- s.rf$surface_gravel+s.rf$surface_cobbles+s.rf$surface_stones+s.rf$surface_boulders+s.rf$surface_flagstones+s.rf$surface_channers
s.rf$surface_gravel <- s.rf$surface_fgravel-s.rf$surface_gravel
s.m <- melt(s.rf, measure.vars=c("total_srf", "surface_fgravel", "surface_gravel", "surface_cobbles", "surface_stones", "surface_boulders", "surface_channers", "surface_flagstones"))
s.summary <- ddply(s.m, .(variable), .fun=conditional.l.rv.h.summary)
s <- site(f)
s.rf <- replace(s.rf, is.na(s.rf), 0)
s.rf$surface_gravel <- s.rf$surface_fgravel-s.rf$surface_gravel
s.rf$surface_fgravel-s.rf$surface_gravel
s <- site(f)
s.rf <- subset(s, select=c("surface_gravel", "surface_cobbles", "surface_stones", "surface_boulders", "surface_flagstones", "surface_channers"))
s.rf <- replace(s.rf, is.na(s.rf), 0)
s.rf$surface_fgravel-s.rf$surface_gravel
summary(s)
s.rf$surface_gravel <- s.rf$surface_gravel-s.rf$surface_fgravel
summary(s.f)
summary(s.rf)
summary(s)
s.rf <- subset(s, select=c("surface_fgravel", "surface_gravel", "surface_cobbles", "surface_stones", "surface_boulders", "surface_flagstones", "surface_channers"))
s.rf <- replace(s.rf, is.na(s.rf), 0)
s.rf$total_srf <- s.rf$surface_gravel+s.rf$surface_cobbles+s.rf$surface_stones+s.rf$surface_boulders+s.rf$surface_flagstones+s.rf$surface_channers
s.rf$surface_gravel <- s.rf$surface_gravel-s.rf$surface_fgravel
summary(s.rf)
summary(s)
summary(s.rf)
s.rf <- subset(s, select=c("surface_fgravel", "surface_gravel", "surface_cobbles", "surface_stones", "surface_boulders", "surface_flagstones", "surface_channers"))
s.rf
# Summarize surface rock fragments
s.rf <- subset(s, select=c("surface_fgravel", "surface_gravel", "surface_cobbles", "surface_stones", "surface_boulders", "surface_flagstones", "surface_channers"))
s.rf <- replace(s.rf, is.na(s.rf), 0)
s.rf$total_srf <- s.rf$surface_gravel+s.rf$surface_cobbles+s.rf$surface_stones+s.rf$surface_boulders+s.rf$surface_flagstones+s.rf$surface_channers
s.rf$surface_gravel <- s.rf$surface_gravel-s.rf$surface_fgravel
s.m <- melt(s.rf, measure.vars=c("total_srf", "surface_fgravel", "surface_gravel", "surface_cobbles", "surface_stones", "surface_boulders", "surface_channers", "surface_flagstones"))
s.summary <- ddply(s.m, .(variable), .fun=conditional.l.rv.h.summary)
bwplot(variable~value, data=s.m, scales=list(x="free"), xlab="percent")
